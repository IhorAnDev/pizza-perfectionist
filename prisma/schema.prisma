generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum OrderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

enum USerRole {
    USER
    ADMIN
}

model User {
    id       Int    @id @default(autoincrement())
    fullName String
    email    String @unique
    password String

    role USerRole @default(USER)

    provider          String?
    providerAccountId String?

    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    cart             Cart?
    orders           Order[]
    verified         DateTime
    verificationCode VerificationCode?
}

model Product {
    id       Int    @id @default(autoincrement())
    name     String
    imageUrl String

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    ingredients  Ingredient[]
    productItems ProductItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    cartItems CartItem[]
}

model Category {
    id Int @id @default(autoincrement())

    name     String
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ingredient {
    id Int @id @default(autoincrement())

    name   String
    price  Int
    imgUrl String

    products  Product[]
    cartItems CartItem[]

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    cartItemId Int?
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    tokenId String?

    totalAmount Int @default(0)

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    cartItems CartItem[]
}

model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int

    ingredienrts Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    fullName String
    address  String
    email    String
    phone    String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    userId Int  @unique
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}
